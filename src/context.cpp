
#include "context.hpp"
#include <vector>
#include <sstream>
#include <iostream>

namespace p2l { namespace common {


    
    //==========================================================================
    
    // Description:
    // The current global context stack
    static std::vector<boost::optional<context_t> > g_global_context_stack;
    
    // Description:
    // The chaining context delimiter
    static std::string CHAINING_CONTEXT_DELIMITER = "/";
    
    //==========================================================================
    
    context_t chain_context( const context_t& new_context )
    {
      boost::optional<context_t> root_context = get_current_context();
      std::ostringstream oss;
      if( root_context ) {
	oss << root_context->id << CHAINING_CONTEXT_DELIMITER;
      }
      oss << new_context.id;
      return context_t( oss.str() );
    }
    
    //==========================================================================
    
    boost::optional<context_t> set_context( const boost::optional<context_t>& c )
    {
      // grab teh top of context stack, creating a stack if need be
      boost::optional<context_t> original;
      if( g_global_context_stack.empty() ) {
	g_global_context_stack.push_back( boost::optional<context_t>() );
      }
      original = g_global_context_stack.back();

      // change the top of context stack
      g_global_context_stack.back() = c;
      
      // std::cout << "CONTEXT SWITCH: ";
      // if( c ) {
      //   std::cout << c->id;
      // } else {
      //   std::cout << "EMPTY";
      // }
      // std::cout << "  orig: ";
      // if( original ) {
      //   std::cout << original->id;
      // } else {
      //   std::cout << "EMPTY";
      // }
      // std::cout << std::endl;
      
      return original;
    }
    
    //==========================================================================
    
    boost::optional<context_t> get_current_context()
    {
      if( g_global_context_stack.empty() ) {
	g_global_context_stack.push_back( boost::optional<context_t>() );
      }
      return g_global_context_stack.back();
    }
    
    //==========================================================================
    
    std::string context_filename( const std::string& name )
    {
      boost::optional<context_t> context = get_current_context();
      std::ostringstream oss;
      if( context ) {
	oss << context->id << "_";
      }
      oss << name;
      return oss.str();
    }
    
    //==========================================================================

    void push_context( const boost::optional<context_t>& c )
    {
      g_global_context_stack.push_back( c );
    }

    //==========================================================================

    void pop_context( )
    {
      if( g_global_context_stack.empty() == false ) {
	g_global_context_stack.pop_back();
      }
    }

    //==========================================================================

    std::string
    context_stack_id()
    {
      std::ostringstream oss;
      for( auto iter : g_global_context_stack ) {
	if( iter ) {
	  oss << (*iter).id;
	}
	oss << "|";
      }
      return oss.str();
    }

    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================
    //==========================================================================



  }
}
